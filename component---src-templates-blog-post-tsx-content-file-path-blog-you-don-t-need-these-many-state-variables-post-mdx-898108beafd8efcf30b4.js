"use strict";(self.webpackChunksamuellawrentz_s_portfolio=self.webpackChunksamuellawrentz_s_portfolio||[]).push([[1297],{1879:function(e,t,a){a.r(t),a.d(t,{default:function(){return f}});var n=a(1151),r=a(7294);function l(e){const t=Object.assign({p:"p",code:"code",h2:"h2",h3:"h3",span:"span"},(0,n.a)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.p,null,"React is reactive because of its reactive state variables and props. What if I told you, you don't need as many state variables as you require? If you've used VueJs or KnockoutJS you might know about ",r.createElement(t.code,null,"computed")," variables. In react, most of the reactive states could be converted into computeds' without involving a state variable."),"\n",r.createElement(t.h2,null,"Computed variables in React?"),"\n",r.createElement(t.p,null,"What is a computed variable? Computed variable is nothing but a value which is derived from or computed from a state variable. The value of this variable changes when there is a change in the state variable that it is dependent upon."),"\n",r.createElement(t.h3,null,"Use of a computed variable"),"\n",r.createElement(t.p,null,"Computed variables can replace your extra state variables and help you reduce your re-renders. It also reduces your ",r.createElement(t.code,null,"useEffect")," hooks that you would require to update these values."),"\n",r.createElement(t.h3,null,"How to convert state variable to a computed value?"),"\n",r.createElement(t.p,null,"Consider this example where you have to show a error message based on the input value. You could see yourself writing two state variables. One for ",r.createElement(t.code,null,"value")," and the other for the ",r.createElement(t.code,null,"error")," state. The following code illustrates it."),"\n",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<deckgo-highlight-code language="jsx"  >\n          <code slot="code">//bad\nconst [value, setValue] = useState()\nconst [error, setError] = useState() // this is not required as a state\n\nuseEffect(() =&gt; {\n  if (value === &#39;&#39;) setError(&#39;Value cannot be empty&#39;)\n}, [value])\n\nreturn (\n  &lt;div&gt;\n    &lt;input value={value} onChange={({ target }) =&gt; setValue(target.value)} /&gt;\n    {error &amp;&amp; &lt;div className=&quot;error-msg&quot;&gt;{error}&lt;/div&gt;}\n  &lt;/div&gt;\n)\n</code>\n        </deckgo-highlight-code>'}}),"\n",r.createElement(t.p,null,"Actually you could keep the ",r.createElement(t.code,null,"error")," as a normal variable which would be computed during each render based on the value of the ",r.createElement(t.code,null,"value")," state."),"\n",r.createElement(t.p,null,"This would be the better approach ✅"),"\n",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<deckgo-highlight-code language="jsx"  >\n          <code slot="code">//good\nconst [value, setValue] = useState()\n// here error is a computed value\nconst error = value === &#39;&#39; ? &#39;Value cannot be empty&#39; : &#39;&#39;\n\nreturn (\n  &lt;div&gt;\n    &lt;input value={value} onChange={({ target }) =&gt; setValue(target.value)} /&gt;\n    {error &amp;&amp; &lt;div className=&quot;error-msg&quot;&gt;{error}&lt;/div&gt;}\n  &lt;/div&gt;\n)\n</code>\n        </deckgo-highlight-code>'}}),"\n",r.createElement(t.p,null,"Thus we have eliminated a state variable and an unwanted useEffect hook. Mission accomplished. Likewise, in your daily work, identify which state variables are computed values and replace them with normal variables. Your app could become a lot faster."),"\n",r.createElement(t.p,null,"⚡️⚡️⚡️"))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.a)(),e.components);return t?r.createElement(t,e,r.createElement(l,e)):l(e)},s=a(9861),c=a(6162),i=a(9202),u=a(2092),m=a(6243),d=a(1528),h=a(4021),g=a(9931);const p={Banner:d.Z};function v(e){return(0,r.useEffect)((()=>{(0,i.q)()}),[]),r.createElement("div",{className:"blog-content"},r.createElement(u.Z,{title:`Samuel Lawrentz | ${e.data.mdx.frontmatter.title}`,description:e.data.mdx.frontmatter.description,image:`/og-images/${e.data.mdx.frontmatter.path.replace(/[/-]/gi,"")}.png`,article:!0}),r.createElement(c.Z,{fluid:e.data.mdx.frontmatter.heroImage.childImageSharp.fluid,className:"hero-image"}),r.createElement("h1",null,e.data.mdx.frontmatter.title),r.createElement(m.g,{className:"tags",spacing:[0]},e.data.mdx.frontmatter.tags.map((e=>r.createElement("div",{className:"tag"},e)))),r.createElement("p",{className:"regularLight"},r.createElement("div",{className:"text-regularLight"},e.data.mdx.frontmatter.date)),r.createElement(m.g,{className:"blog-cont text-regular",spacing:[72]},r.createElement(n.Z,{components:p},r.createElement("div",null,e.children))),r.createElement(m.g,{spacing:[32]},"Consider subscribing to the newsletter for more tips and hacks like this.",r.createElement("div",{style:{marginTop:8}}),r.createElement(g.J,null)),r.createElement(s.Z,{repo:"samuellawrentz/blog-comments",repoId:"R_kgDOH0vDow",category:"General",categoryId:"DIC_kwDOH0vDo84CQ111",mapping:"pathname",reactionsEnabled:"0",emitMetadata:"0",theme:"dark"}),r.createElement(h.do,{config:{alignment:"left",color:"social",enabled:!0,font_size:16,hide_desktop:!1,labels:"counts",language:"en",min_count:0,networks:["linkedin","facebook","twitter","pinterest","email","whatsapp"],padding:12,radius:4,show_total:!0,show_mobile:!0,show_toggle:!0,size:48,top:160,url:`https://samuellawrentz.com${e.data.mdx.frontmatter.path}`,description:e.data.mdx.frontmatter.description,title:e.data.mdx.frontmatter.title,message:`Check out this post by Samuel Lawrentz on - ${e.data.mdx.frontmatter.title}.\n            Find it here - https://samuellawrentz.com${e.data.mdx.frontmatter.path}\n            `,subject:`Samuel Lawrentz Blog - ${e.data.mdx.frontmatter.title}`,username:"samuellawrentz"}}))}function f(e){return r.createElement(v,e,r.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-blog-you-don-t-need-these-many-state-variables-post-mdx-898108beafd8efcf30b4.js.map