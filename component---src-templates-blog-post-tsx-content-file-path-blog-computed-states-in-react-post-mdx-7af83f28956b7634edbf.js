"use strict";(self.webpackChunksamuellawrentz_s_portfolio=self.webpackChunksamuellawrentz_s_portfolio||[]).push([[6613],{7836:function(e,t,a){a.r(t),a.d(t,{default:function(){return w}});var n=a(1151),o=a(7294);function r(e){const t=Object.assign({p:"p",h2:"h2",span:"span",code:"code"},(0,n.a)(),e.components);return o.createElement(o.Fragment,null,o.createElement(t.p,null,"React is like a high-speed jet ski with its reactive state variables and props that allow you to zip around your app with lightning-fast agility. But what if I told you that you could make your app even faster? Get ready to strap on your racing goggles as we dive into the world of computed variables."),"\n",o.createElement(t.h2,null,"Computed Variables in React"),"\n",o.createElement(t.p,null,"In React, a computed variable is a value that is derived from or computed based on one or more state variables. It is similar to a computed property in other frameworks, such as Vue.js or Knockout.js. Computed variables are created using hooks like useMemo or useCallback, and their value is only recomputed when their dependencies change. This allows for a more efficient rendering process, since the component doesn't need to re-render every time a state variable changes, but only when the computed variable changes. In other words, computed variables act as a kind of pit stop, where the component can swap out a slow state variable for a speedy computed one. This can help eliminate unnecessary re-renders and make your app faster than a cheetah on a jet ski, especially in complex applications where performance is critical."),"\n",o.createElement(t.h2,null,"Some code please"),"\n",o.createElement(t.p,null,"Let's take a look at an example. Say you have a component that renders a list of items, and you want to display the total number of items in the list. You could use a computed variable to achieve this:"),"\n",o.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<deckgo-highlight-code language="js"  >\n          <code slot="code">const [items, setItems] = useState([]);\n\n// usememo is not necessary here, but it&#39;s good practice\n// if itemCount is a computation heavy value, we can memoize it\nconst itemCount = useMemo(() =&gt; items.length, [items]);</code>\n        </deckgo-highlight-code>'}}),"\n",o.createElement(t.p,null,"By using ",o.createElement(t.code,null,"useMemo"),", we can create a memoized version of the ",o.createElement(t.code,null,"itemCount")," variable. This means that the value of ",o.createElement(t.code,null,"itemCount")," will only be computed when the ",o.createElement(t.code,null,"items")," state variable changes, which can help eliminate unnecessary re-renders and make your app faster than a jet-propelled cheetah."),"\n",o.createElement(t.h2,null,"Conclusion: The Fast and the Furious"),"\n",o.createElement(t.p,null,"In conclusion, computed variables can help make your React app faster than a cheetah on a jet ski. By identifying which state variables are computed values and replacing them with normal variables, you can improve your app's performance and leave your competitors in the dust. So buckle up and get ready to leave your competition in the rearview mirror!"))}var l=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.a)(),e.components);return t?o.createElement(t,e,o.createElement(r,e)):r(e)},s=a(9861),i=a(6162),c=a(9202),m=a(2092),d=a(6243),u=a(1528),p=a(4021),h=a(9931);const g={Banner:u.Z};function f(e){return(0,o.useEffect)((()=>{(0,c.q)()}),[]),o.createElement("div",{className:"blog-content"},o.createElement(m.Z,{title:`Samuel Lawrentz | ${e.data.mdx.frontmatter.title}`,description:e.data.mdx.frontmatter.description,image:`/og-images/${e.data.mdx.frontmatter.path.replace(/[/-]/gi,"")}.png`,article:!0}),o.createElement(i.Z,{fluid:e.data.mdx.frontmatter.heroImage.childImageSharp.fluid,className:"hero-image"}),o.createElement("h1",null,e.data.mdx.frontmatter.title),o.createElement(d.g,{className:"tags",spacing:[0]},e.data.mdx.frontmatter.tags.map((e=>o.createElement("div",{className:"tag"},e)))),o.createElement("p",{className:"regularLight"},o.createElement("div",{className:"text-regularLight"},e.data.mdx.frontmatter.date)),o.createElement(d.g,{className:"blog-cont text-regular",spacing:[72]},o.createElement(n.Z,{components:g},o.createElement("div",null,e.children))),o.createElement(d.g,{spacing:[32]},"Consider subscribing to the newsletter for more tips and hacks like this.",o.createElement("div",{style:{marginTop:8}}),o.createElement(h.J,null)),o.createElement(s.Z,{repo:"samuellawrentz/blog-comments",repoId:"R_kgDOH0vDow",category:"General",categoryId:"DIC_kwDOH0vDo84CQ111",mapping:"pathname",reactionsEnabled:"0",emitMetadata:"0",theme:"dark"}),o.createElement(p.do,{config:{alignment:"left",color:"social",enabled:!0,font_size:16,hide_desktop:!1,labels:"counts",language:"en",min_count:0,networks:["linkedin","facebook","twitter","pinterest","email","whatsapp"],padding:12,radius:4,show_total:!0,show_mobile:!0,show_toggle:!0,size:48,top:160,url:`https://samuellawrentz.com${e.data.mdx.frontmatter.path}`,description:e.data.mdx.frontmatter.description,title:e.data.mdx.frontmatter.title,message:`Check out this post by Samuel Lawrentz on - ${e.data.mdx.frontmatter.title}.\n            Find it here - https://samuellawrentz.com${e.data.mdx.frontmatter.path}\n            `,subject:`Samuel Lawrentz Blog - ${e.data.mdx.frontmatter.title}`,username:"samuellawrentz"}}))}function w(e){return o.createElement(f,e,o.createElement(l,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-blog-computed-states-in-react-post-mdx-7af83f28956b7634edbf.js.map